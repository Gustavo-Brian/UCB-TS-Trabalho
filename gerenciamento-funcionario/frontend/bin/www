#!/usr/bin/env node

/**
 * M√≥dulos necess√°rios
 */
var app = require('../app');
var debug = require('debug')('gestao-funcionario:server');
var http = require('http');

/**
 * Define a porta do servidor e armazena no Express
 */
var port = normalizePort(process.env.PORT || '19134');
app.set('port', port);


/**
 * Cria o servidor HTTP
 */
var server = http.createServer(app);

/**
 * Inicia o servidor na porta e no IP desejado
 * 0.0.0.0 permite acessar tanto por localhost quanto por IP externo
 */
server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Converte o valor da porta em n√∫mero ou mant√©m como string (caso named pipe)
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port;  // n√∫mero da porta

  return false;
}

/**
 * Lida com erros do servidor
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Porta ' + port;

  // Trata erros comuns
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requer privil√©gios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' j√° est√° em uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Evento quando o servidor come√ßa a escutar
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'porta ' + addr.port;
  debug('Escutando em ' + bind);
  console.log(`‚úÖ Servidor rodando em http://localhost:${addr.port}`);
  console.log(`üåê Tamb√©m acess√≠vel em http://189.61.9.140:${addr.port} (se IP estiver acess√≠vel externamente)`);
}
